/**
 * @fileoverview gRPC-Web generated client stub for main
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: songs.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as songs_pb from './songs_pb'; // proto import: "songs.proto"


export class SongServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorUploadSong = new grpcWeb.MethodDescriptor(
    '/main.SongService/UploadSong',
    grpcWeb.MethodType.UNARY,
    songs_pb.UploadSongRequest,
    songs_pb.UploadSongResponse,
    (request: songs_pb.UploadSongRequest) => {
      return request.serializeBinary();
    },
    songs_pb.UploadSongResponse.deserializeBinary
  );

  uploadSong(
    request: songs_pb.UploadSongRequest,
    metadata?: grpcWeb.Metadata | null): Promise<songs_pb.UploadSongResponse>;

  uploadSong(
    request: songs_pb.UploadSongRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: songs_pb.UploadSongResponse) => void): grpcWeb.ClientReadableStream<songs_pb.UploadSongResponse>;

  uploadSong(
    request: songs_pb.UploadSongRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: songs_pb.UploadSongResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.SongService/UploadSong',
        request,
        metadata || {},
        this.methodDescriptorUploadSong,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.SongService/UploadSong',
    request,
    metadata || {},
    this.methodDescriptorUploadSong);
  }

  methodDescriptorGetSong = new grpcWeb.MethodDescriptor(
    '/main.SongService/GetSong',
    grpcWeb.MethodType.UNARY,
    songs_pb.GetSongRequest,
    songs_pb.GetSongResponse,
    (request: songs_pb.GetSongRequest) => {
      return request.serializeBinary();
    },
    songs_pb.GetSongResponse.deserializeBinary
  );

  getSong(
    request: songs_pb.GetSongRequest,
    metadata?: grpcWeb.Metadata | null): Promise<songs_pb.GetSongResponse>;

  getSong(
    request: songs_pb.GetSongRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: songs_pb.GetSongResponse) => void): grpcWeb.ClientReadableStream<songs_pb.GetSongResponse>;

  getSong(
    request: songs_pb.GetSongRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: songs_pb.GetSongResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.SongService/GetSong',
        request,
        metadata || {},
        this.methodDescriptorGetSong,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.SongService/GetSong',
    request,
    metadata || {},
    this.methodDescriptorGetSong);
  }

  methodDescriptorStreamSongFile = new grpcWeb.MethodDescriptor(
    '/main.SongService/StreamSongFile',
    grpcWeb.MethodType.SERVER_STREAMING,
    songs_pb.StreamSongFileRequest,
    songs_pb.StreamSongFileResponse,
    (request: songs_pb.StreamSongFileRequest) => {
      return request.serializeBinary();
    },
    songs_pb.StreamSongFileResponse.deserializeBinary
  );

  streamSongFile(
    request: songs_pb.StreamSongFileRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<songs_pb.StreamSongFileResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/main.SongService/StreamSongFile',
      request,
      metadata || {},
      this.methodDescriptorStreamSongFile);
  }

  methodDescriptorStreamAlbumCover = new grpcWeb.MethodDescriptor(
    '/main.SongService/StreamAlbumCover',
    grpcWeb.MethodType.SERVER_STREAMING,
    songs_pb.StreamAlbumCoverRequest,
    songs_pb.StreamAlbumCoverResponse,
    (request: songs_pb.StreamAlbumCoverRequest) => {
      return request.serializeBinary();
    },
    songs_pb.StreamAlbumCoverResponse.deserializeBinary
  );

  streamAlbumCover(
    request: songs_pb.StreamAlbumCoverRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<songs_pb.StreamAlbumCoverResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/main.SongService/StreamAlbumCover',
      request,
      metadata || {},
      this.methodDescriptorStreamAlbumCover);
  }

}

